<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[BFC及其应用]]></title>
      <url>https://wutongshu1993.github.io/2017/03/16/BFC%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="BFC是什么"><a href="#BFC是什么" class="headerlink" title="BFC是什么"></a>BFC是什么</h1><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>
<ul>
<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>
<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；<blockquote>
<p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p>
<h2 id="BFC的布局规则"><a href="#BFC的布局规则" class="headerlink" title="BFC的布局规则"></a>BFC的布局规则</h2></blockquote>
</li>
</ul>
<ol>
<li>内部的Box会在垂直方向，一个接一个地放置。</li>
<li>Box垂直方向的距离由margin决定。<strong>属于同一个BFC的两个相邻Box的margin会发生重叠</strong>（这就是大名鼎鼎的margin折叠）</li>
<li>每个元素的margin box的左边， 与包含块border</li>
<li>box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
<li><strong>BFC的区域不会与float box重叠。</strong>（这个可以用来自适应布局）</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li><strong>计算BFC的高度时，浮动元素也参与计算</strong>（这个可以用来清除浮动）</li>
</ol>
<h2 id="哪些元素会生成BFC"><a href="#哪些元素会生成BFC" class="headerlink" title="哪些元素会生成BFC"></a>哪些元素会生成BFC</h2><ul>
<li>根元素</li>
<li>float属性不为none</li>
<li>position为absolute或fixed</li>
<li>display为inline-block, table-cell, table-caption, flex, inline-flex</li>
<li>overflow不为visible</li>
</ul>
<h2 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h2><h3 id="自适应两栏布局"><a href="#自适应两栏布局" class="headerlink" title="自适应两栏布局"></a>自适应两栏布局</h3><p>一般来说加了浮动之后块级元素之间会出现重叠的现象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">           width: 900px;</div><div class="line">           margin: 0 auto;</div><div class="line">       &#125;</div><div class="line">       .aside &#123;</div><div class="line">           width: 200px;</div><div class="line">           height: 150px;</div><div class="line">           float: left;</div><div class="line">           background: #f66;</div><div class="line">       &#125;</div><div class="line">       .content &#123;</div><div class="line">           height: 200px;</div><div class="line">           background: #fcc;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/bfc1_1.jpg" alt="image">  </p>
<p>运用第5条规则：BFC的区域不会与float box重叠。所以我们只要触发右边的.content的BFC属性，便可是实现自适应，而不重叠的布局。</p>
<p><img src="/images/bfc1_2.jpg" alt="image"></p>
<h3 id="清除内部浮动："><a href="#清除内部浮动：" class="headerlink" title="清除内部浮动："></a>清除内部浮动：</h3><p>我们常说，清除内部浮动有如下几种办法：</p>
<ol>
<li>给父元素加上overflow:hidden或者是overflow:auto</li>
<li>在父元素::after加上clear:both</li>
<li>给父元素加上浮动</li>
</ol>
<p>其实清除浮动的原理就是利用触发父元素的BFC属性了。</p>
<h3 id="清除margin折叠"><a href="#清除margin折叠" class="headerlink" title="清除margin折叠"></a>清除margin折叠</h3><p>相邻的两个div，他们会发生margin折叠，清除margin折叠有以下方法：其核心在于使两个相邻的块级元素处于不同的BFC块中。</p>
<ol>
<li>给其中一个块级元素的外部再套上一个div元素，并触发这个元素的BFC属性</li>
</ol>
<p>事实上，不仅相邻的box元素会发生折叠，父子元素之间也会存在这样的现象。解决的方法是给父级元素加上内边距或者边框。</p>
]]></content>
      
        
        <tags>
            
            <tag> bfc margin折叠 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[懒加载]]></title>
      <url>https://wutongshu1993.github.io/2017/03/13/%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<ol>
<li><p>在html中给img指定两个图片资源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;default.jpg&quot; dataSrc=&quot;img.jpg&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>lazyload函数</p>
</li>
</ol>
<p>核心在于当满足了img.offset &lt; scrolllTop + window.innerHeight的时候，替换img的 src<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var imgs = document.getElementsByTagName(&apos;img&apos;);</div><div class="line">    function lazyload()&#123;</div><div class="line">        var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;</div><div class="line">        var viewportSize = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;</div><div class="line">        var len = imgs.length;</div><div class="line">        var i , n = 0;</div><div class="line">        for(i = n; i &lt; len; i++)&#123;</div><div class="line">            var offsetTop = imgs[i].offsetTop;</div><div class="line">            if(offsetTop &lt; scrollTop + viewportSize)&#123;//显示真正的图片</div><div class="line">                imgs[i].src = imgs[i].getAttribute(&apos;dataSrc&apos;);</div><div class="line">            &#125;</div><div class="line">            n = i + 1;//避免每次for循环都是从0开始</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>优化：将lazyload函数绑定在window的onscroll事件中<br>window.onscroll = throttle(lazyload, 500, 1000);</li>
<li>优化<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     *</div><div class="line">     * @param fun 要执行的函数</div><div class="line">     * @param delay 延时的时间</div><div class="line">     * @param time 在time内执行一次</div><div class="line">     */</div><div class="line">    function throttle(fun, delay, time) &#123;</div><div class="line">        var timeout, startTime = new Date();</div><div class="line">        return function()&#123;</div><div class="line">            var context = this,</div><div class="line">                    args = arguments,</div><div class="line">                    curTime = new Date();</div><div class="line">            clearTimeout(timeout);</div><div class="line">            //如果到达了触发时间</div><div class="line">            if(curTime - startTime &gt;= time)&#123;</div><div class="line">                fun.apply(context, args);</div><div class="line">                startTime = curTime;</div><div class="line">            &#125;</div><div class="line">            else &#123;//没到达触发时间，重新设置定时器</div><div class="line">                timeout = setTimeout(fun, delay);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    lazyload();//至少执行一次</div><div class="line">    window.onscroll = throttle(lazyload, 500, 1000);</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo搭建博客]]></title>
      <url>https://wutongshu1993.github.io/2017/03/13/hello-hexo/</url>
      <content type="html"><![CDATA[<p>欢迎来到我的个人博客</p>
]]></content>
      
        
        <tags>
            
            <tag> nodejs， hexo， nextT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://wutongshu1993.github.io/2017/03/13/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
